{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/ihababusafa/dev/NIEPD/apps/website/src/app/api/contact/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\n\n// Validation schema for contact form\nconst contactFormSchema = z.object({\n  name: z.string().min(1, 'Name is required').max(100, 'Name is too long'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().optional(),\n  subject: z.string().min(1, 'Subject is required').max(200, 'Subject is too long'),\n  message: z.string().min(10, 'Message must be at least 10 characters').max(2000, 'Message is too long'),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    \n    // Validate the request body\n    const result = contactFormSchema.safeParse(body);\n    \n    if (!result.success) {\n      return NextResponse.json(\n        { \n          error: 'Validation error', \n          details: result.error.issues.map(err => ({\n            field: err.path.join('.'),\n            message: err.message\n          }))\n        },\n        { status: 400 }\n      );\n    }\n\n    const { name, email, phone, subject, message } = result.data;\n\n    // Here you would typically:\n    // 1. Save the message to your database\n    // 2. Send an email notification to admins\n    // 3. Send a confirmation email to the user\n    // 4. Integrate with your CRM/support system\n\n    // Save to CMS database via API\n    const cmsApiUrl = process.env.NEXT_PUBLIC_CMS_API_URL || 'http://localhost:3001';\n    \n    try {\n      const cmsResponse = await fetch(`${cmsApiUrl}/api/contact-messages`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          phone,\n          subject,\n          message,\n        }),\n      });\n\n      if (!cmsResponse.ok) {\n        console.error('Failed to save message to CMS:', await cmsResponse.text());\n        // Continue anyway - don't fail the user request\n      } else {\n        console.log('Contact message saved to CMS successfully');\n      }\n    } catch (error) {\n      console.error('Error saving to CMS:', error);\n      // Continue anyway - don't fail the user request\n    }\n\n    // Log for debugging\n    console.log('New contact form submission:', {\n      name,\n      email,\n      phone,\n      subject,\n      message,\n      timestamp: new Date().toISOString(),\n    });\n\n    // In a real implementation, you might want to:\n    // - Send email using a service like SendGrid, AWS SES, or Nodemailer\n    // - Save to database using Prisma, MongoDB, or your preferred ORM\n    // - Send to CMS system for admin review\n    \n    // Example email sending (commented out - requires email service setup):\n    /*\n    try {\n      await sendEmail({\n        to: 'admin@niepd.edu.sa',\n        subject: `New Contact Form: ${subject}`,\n        html: `\n          <h2>New Contact Form Submission</h2>\n          <p><strong>Name:</strong> ${name}</p>\n          <p><strong>Email:</strong> ${email}</p>\n          <p><strong>Phone:</strong> ${phone || 'Not provided'}</p>\n          <p><strong>Subject:</strong> ${subject}</p>\n          <p><strong>Message:</strong></p>\n          <p>${message.replace(/\\n/g, '<br>')}</p>\n          <p><strong>Submitted at:</strong> ${new Date().toLocaleString()}</p>\n        `\n      });\n      \n      // Send confirmation email to user\n      await sendEmail({\n        to: email,\n        subject: 'شكراً لتواصلكم معنا - Thank you for contacting us',\n        html: `\n          <div dir=\"rtl\" style=\"font-family: Arial, sans-serif;\">\n            <h2>شكراً لتواصلكم معنا</h2>\n            <p>عزيزي/عزيزتي ${name}،</p>\n            <p>شكراً لكم على تواصلكم معنا. لقد تلقينا رسالتكم وسنقوم بالرد عليكم في أقرب وقت ممكن.</p>\n            <hr>\n            <h2>Thank you for contacting us</h2>\n            <p>Dear ${name},</p>\n            <p>Thank you for contacting us. We have received your message and will respond to you as soon as possible.</p>\n          </div>\n        `\n      });\n    } catch (emailError) {\n      console.error('Email sending failed:', emailError);\n      // Don't fail the request if email fails\n    }\n    */\n\n    return NextResponse.json(\n      { \n        message: 'Contact form submitted successfully',\n        success: true \n      },\n      { status: 200 }\n    );\n\n  } catch (error) {\n    console.error('Contact form submission error:', error);\n    \n    return NextResponse.json(\n      { \n        error: 'Internal server error',\n        message: 'Failed to submit contact form. Please try again later.' \n      },\n      { status: 500 }\n    );\n  }\n}\n\n// Handle OPTIONS request for CORS\nexport async function OPTIONS(request: NextRequest) {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,qCAAqC;AACrC,MAAM,oBAAoB,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,MAAM,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,oBAAoB,GAAG,CAAC,KAAK;IACrD,OAAO,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,OAAO,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,SAAS,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,uBAAuB,GAAG,CAAC,KAAK;IAC3D,SAAS,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,0CAA0C,GAAG,CAAC,MAAM;AAClF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,4BAA4B;QAC5B,MAAM,SAAS,kBAAkB,SAAS,CAAC;QAE3C,IAAI,CAAC,OAAO,OAAO,EAAE;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,OAAO;gBACP,SAAS,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA,MAAO,CAAC;wBACvC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC;wBACrB,SAAS,IAAI,OAAO;oBACtB,CAAC;YACH,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,OAAO,IAAI;QAE5D,4BAA4B;QAC5B,uCAAuC;QACvC,0CAA0C;QAC1C,2CAA2C;QAC3C,4CAA4C;QAE5C,+BAA+B;QAC/B,MAAM,YAAY,6DAAuC;QAEzD,IAAI;YACF,MAAM,cAAc,MAAM,MAAM,GAAG,UAAU,qBAAqB,CAAC,EAAE;gBACnE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACnB;oBACA;oBACA;oBACA;oBACA;gBACF;YACF;YAEA,IAAI,CAAC,YAAY,EAAE,EAAE;gBACnB,QAAQ,KAAK,CAAC,kCAAkC,MAAM,YAAY,IAAI;YACtE,gDAAgD;YAClD,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,gDAAgD;QAClD;QAEA,oBAAoB;QACpB,QAAQ,GAAG,CAAC,gCAAgC;YAC1C;YACA;YACA;YACA;YACA;YACA,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,+CAA+C;QAC/C,qEAAqE;QACrE,kEAAkE;QAClE,wCAAwC;QAExC,wEAAwE;QACxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqCA,GAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAEhD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,QAAQ,OAAoB;IAChD,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAC5B,QAAQ;QACR,SAAS;YACP,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AACF","debugId":null}}]
}